class Solution:
    def regionsBySlashes(self, grid: List[str]) -> int:
        n = len(grid)
        parent = {}
        
        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]
        
        def union(x, y):
            rootX = find(x)
            rootY = find(y)
            if rootX != rootY:
                parent[rootX] = rootY
        
        def get_index(i, j, k):
            return (i * n + j) * 4 + k
        
        for i in range(n):
            for j in range(n):
                for k in range(4):
                    parent[get_index(i, j, k)] = get_index(i, j, k)
                        
        for i in range(n):
            for j in range(n):
                if grid[i][j] == '/':
                    union(get_index(i, j, 0), get_index(i, j, 3))
                    union(get_index(i, j, 1), get_index(i, j, 2))
                elif grid[i][j] == '\\':
                    union(get_index(i, j, 0), get_index(i, j, 1))
                    union(get_index(i, j, 2), get_index(i, j, 3))
                else:
                    union(get_index(i, j, 0), get_index(i, j, 1))
                    union(get_index(i, j, 1), get_index(i, j, 2))
                    union(get_index(i, j, 2), get_index(i, j, 3))
                
                if j + 1 < n:
                    union(get_index(i, j, 1), get_index(i, j + 1, 3))
                if i + 1 < n:
                    union(get_index(i, j, 2), get_index(i + 1, j, 0))
        return sum(find(x) == x for x in parent)
